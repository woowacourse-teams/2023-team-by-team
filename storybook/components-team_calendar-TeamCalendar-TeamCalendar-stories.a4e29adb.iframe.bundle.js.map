{"version":3,"file":"components-team_calendar-TeamCalendar-TeamCalendar-stories.a4e29adb.iframe.bundle.js","mappings":";;;;;;;AAUA;AAGA;;;;AAMA;;AAIA;;;AAKA;;;;;AAOA;;;;AAIA;;AAEA;AAGA;;;;;;;;AAQA;;;;AAIA;;AAIA;;;AAGA;;AAGA;;AAEA;;;AAGA;AACA;;AAIA;;AAQA;;;;;AAKA;AACA;;;;AAMA;AACA;AAGA;;;;;AAKA;AACA;;;AAGA;AC3GA;AACA;;;;;;;;;AASA;;;;ADqEA;AEwHA;;;;ACzLA;;;AAMA;;;;;AAAA;;AASA;;;AASA;;;;;;;;;;;AAcA;;AAEA;AAMA;AAOA;AAeA;;AAEA;;AChFA;;AAIA;AAIA;AAEA;;AAFA;;;;;;;ACFA;;;;AAIA;;;;;;;AAOA;;;;;;;AAOA;AAGA;;;;;;;;;;AAUA;AAGA;;;;;;;;;;;AAaA;;;;;;;;;AASA;;;AAIA;;;;;;;;AAUA;;;;;;;;AAUA;;;;;;AAQA;;;;;AAgBA;;AAGA;AACA;AAKA;;;;AAAA;;;;;;;AC3GA;;;;;;;;;;ACNA;;;;AAOA;;;;AASA;;;AAAA;;AAQA;;;;AAQA;;;;;;;;;;;AAYA;AAGA;;;;;;;;AAUA;;;;;AAOA;;;;;;;;;;;;AAYA;;AAEA;;;;;AAOA;;;;;AAKA;;;;AAMA;;;;;;;;;;;;;;;;AAkBA;;AAIA;;;;;;;;;;AAYA;;;;;;;;;AASA;;AAIA;AACA;;;;;;;ACjJA;;;;AAOA;;;;AAQA;;;AAAA;;AAOA;;;AAOA;;;;;;;;;;;AAYA;;;;;;AAMA;;AAIA;;;;;;;;AAQA;AAGA;;;AAKA;;;;;;AAQA;;;;;;AAQA;;;;AAIA;;AAEA;;;AAOA;;;AAMA;;;;;AAKA;;AAEA;AAGA;;;;;;;AASA;;;;;;AAQA;;;;;AAKA;;;AAKA;;;;;;;;;;AAoBA;;;;AAJA;;AAIA;;;;AAMA;;;;;;;AASA;;;;;AC9IA;AAGA;;AAGA;AAEA;;AAFA;;AAOA;AACA;AACA;AAIA;;;;;;;;AAuBA;AAEA;;AAKA;;;AAKA;;AAEA;;;;AAIA;AAGA;;;AAGA;;;;;;;AAWA;;;;;;;;AAQA;AACA;;;;;;;ACtHA;;;;AAOA;;;;AAQA;;;AAAA;;AAOA;;;AAOA;;;;;;;;;;;AAYA;;;;;;AAMA;;AAIA;;;;;;;;AAQA;AAGA;;;AAKA;;;;;;AAQA;;;;;;AAQA;;;;AAIA;;AAEA;;;AAOA;;;AAMA;;;;;AAKA;;AAEA;AAGA;;;;;;;AASA;;;;;;AAQA;;;;;AAKA;;;AAKA;;;;;;;;;;AAYA;;;;AAMA;;;;;;;AASA;;;;;;;AC1KA;;;AAGA;;;AAOA;;;;;;AAOA;;;;;;;AAOA;AAGA;;;;;;AAQA;;;;AAMA;;;AAKA;;;;;;AAQA;;;;;AAKA;;AAMA;;;AAMA;;;;;;AAQA;;;;;;;;;;;;;;;;;AAiBA;;AAoBA;;;;;AAiBA;;AAGA;AACA;AASA;;;;AAAA;;;;;;;;;;;;;;AAtCA;;;;;ACOA;;;;;AChHA;AACA;;;;;;;AAOA;;;;;;;;AAUA;AACA","sources":["webpack://frontend/./src/components/team_calendar/TeamCalendar/TeamCalendar.styled.ts","webpack://frontend/./src/components/team_calendar/CalendarDragScreen/CalendarDragScreen.styled.ts","webpack://frontend/./src/components/team_calendar/TeamCalendar/TeamCalendar.tsx","webpack://frontend/./src/components/common/DateCell/DateCell.styled.ts","webpack://frontend/./src/components/common/Spacing/Spacing.styled.ts","webpack://frontend/./src/components/team_calendar/DailyScheduleModal/DailyScheduleModal.styled.ts","webpack://frontend/./src/components/team_calendar/FakeScheduleBarsScreen/FakeScheduleBarsScreen.styled.ts","webpack://frontend/./src/components/team_calendar/ICalendarModal/ICalendarModal.styled.ts","webpack://frontend/./src/components/team_calendar/ScheduleAddModal/ScheduleAddModal.styled.ts","webpack://frontend/./src/components/team_calendar/ScheduleBar/ScheduleBar.styled.ts","webpack://frontend/./src/components/team_calendar/ScheduleEditModal/ScheduleEditModal.styled.ts","webpack://frontend/./src/components/team_calendar/ScheduleModal/ScheduleModal.styled.ts","webpack://frontend/./src/components/team_calendar/ScheduleModal/ScheduleModal.tsx","webpack://frontend/./src/components/team_calendar/ScheduleMoreCell/ScheduleMoreCell.styled.ts"],"sourcesContent":["import { css, styled } from 'styled-components';\nimport type { CalendarSize } from '~/types/size';\n\nexport const Container = styled.div<{ $calendarSize: CalendarSize }>`\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n  height: 100%;\n\n  padding: 0 ${({ $calendarSize }) => ($calendarSize === 'md' ? 10 : 0)}px;\n`;\n\nexport const CalendarHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const CalendarGrid = styled.div`\n  position: relative;\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const FeatureButtonContainer = styled.div`\n  display: flex;\n  align-items: center;\n\n  column-gap: 8px;\n`;\n\nexport const DaysOfWeek = styled.div<{ $calendarSize: CalendarSize }>`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n\n  height: ${({ $calendarSize }) => ($calendarSize === 'md' ? 24 : 20)}px;\n\n  border-bottom: 2px solid ${({ theme }) => theme.color.GRAY200};\n`;\n\nexport const DayOfWeek = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  height: 16px;\n\n  &:nth-child(1) {\n    color: ${({ theme }) => theme.color.RED};\n  }\n\n  &:nth-child(7) {\n    color: ${({ theme }) => theme.color.PURPLE};\n  }\n`;\n\nexport const DateView = styled.div<{ $calendarSize: CalendarSize }>`\n  display: grid;\n  grid-template-columns: repeat(7, 1fr);\n  grid-auto-rows: ${({ $calendarSize }) =>\n    $calendarSize === 'md' ? 110 : 80}px;\n\n  background-color: ${({ theme }) => theme.color.WHITE};\n\n  border-left: 2px solid ${({ theme }) => theme.color.GRAY200};\n\n  & > div {\n    border-right: 2px solid ${({ theme }) => theme.color.GRAY200};\n    border-bottom: 2px solid ${({ theme }) => theme.color.GRAY200};\n  }\n`;\n\nexport const ScheduleBarContainer = styled.div`\n  position: relative;\n`;\n\nexport const calendarTitle = (size: CalendarSize) => css`\n  font-size: ${size === 'md' ? 24 : 18}px;\n`;\n\nexport const scheduleAddButton = (calendarSize: CalendarSize) => css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: ${calendarSize === 'md' ? 30 : 24}px;\n  height: ${calendarSize === 'md' ? 30 : 24}px;\n  padding: 4px;\n\n  font-size: 24px;\n`;\n\nexport const arrowButton = (calendarSize: CalendarSize) => css`\n  ${calendarSize === 'sm' && 'padding: 4px 8px'}\n`;\n\nexport const exportButton = (calendarSize: CalendarSize) => css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: ${calendarSize === 'md' ? 30 : 24}px;\n  height: ${calendarSize === 'md' ? 30 : 24}px;\n  padding: 4px;\n\n  background-color: ${({ theme }) => theme.color.GRAY500};\n`;\n","import { styled } from 'styled-components';\r\n\r\nexport const Container = styled.div<{ $isDragging: boolean }>`\r\n  ${({ $isDragging }) => !$isDragging && 'display: none'};\r\n  position: absolute;\r\n  overflow: hidden;\r\n  left: 0;\r\n  top: 0;\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  background-color: ${({ theme }) => theme.color.WHITE_BLUR};\r\n\r\n  cursor: all-scroll;\r\n`;\r\n","import { Fragment, useState, useRef } from 'react';\nimport Text from '~/components/common/Text/Text';\nimport Button from '~/components/common/Button/Button';\nimport DateCell from '~/components/common/DateCell/DateCell';\nimport ScheduleModal from '~/components/team_calendar/ScheduleModal/ScheduleModal';\nimport ScheduleBar from '~/components/team_calendar/ScheduleBar/ScheduleBar';\nimport ScheduleAddModal from '~/components/team_calendar/ScheduleAddModal/ScheduleAddModal';\nimport ScheduleEditModal from '~/components/team_calendar/ScheduleEditModal/ScheduleEditModal';\nimport ScheduleMoreCell from '~/components/team_calendar/ScheduleMoreCell/ScheduleMoreCell';\nimport DailyScheduleModal from '~/components/team_calendar/DailyScheduleModal/DailyScheduleModal';\nimport ICalendarModal from '~/components/team_calendar/ICalendarModal/ICalendarModal';\nimport { useCalendar } from '~/hooks/useCalendar';\nimport { useScheduleModal } from '~/hooks/schedule/useScheduleModal';\nimport { useFetchSchedules } from '~/hooks/queries/useFetchSchedules';\nimport { useModal } from '~/hooks/useModal';\nimport { useTeamPlace } from '~/hooks/useTeamPlace';\nimport { useCalendarResizePosition } from '~/hooks/useCalendarResizePosition';\nimport { usePrefetchSchedules } from '~/hooks/queries/usePrefetchSchedules';\nimport { useScheduleDragStatus } from '~/hooks/schedule/useScheduleBarDragStatus';\nimport { DAYS_OF_WEEK, MODAL_OPEN_TYPE } from '~/constants/calendar';\nimport { generateScheduleBars } from '~/utils/generateScheduleBars';\nimport { arrayOf } from '~/utils/arrayOf';\nimport { getDateByPosition } from '~/utils/getDateByPosition';\nimport { generateCalendarRangeByYearMonth } from '~/utils/generateCalendarRangeByYearMonth';\nimport type { Position, ModalOpenType } from '~/types/schedule';\nimport type { CalendarSize } from '~/types/size';\nimport {\n  ArrowLeftIcon,\n  ArrowRightIcon,\n  ExportIcon,\n  PlusIcon,\n} from '~/assets/svg';\nimport * as S from './TeamCalendar.styled';\nimport { parseDate } from '~/utils/parseDate';\nimport CalendarDragScreen from '../CalendarDragScreen/CalendarDragScreen';\nimport Spacing from '~/components/common/Spacing/Spacing';\n\ninterface TeamCalendarProps {\n  calendarSize?: CalendarSize;\n}\n\nconst TeamCalendar = (props: TeamCalendarProps) => {\n  const { calendarSize = 'md' } = props;\n\n  const { dragStatus, handleDragStart, handleMouseUp } =\n    useScheduleDragStatus();\n\n  const { teamPlaceId } = useTeamPlace();\n  const {\n    year,\n    month,\n    calendar,\n    currentDate,\n    today,\n    handlers: { handlePrevButtonClick, handleNextButtonClick },\n  } = useCalendar();\n  const { isModalOpen, openModal } = useModal();\n  const {\n    modalScheduleId,\n    modalPosition,\n    handlers: { handleScheduleModalOpen },\n  } = useScheduleModal();\n\n  const prevCalendarYear = month === 0 ? year - 1 : year;\n  const prevCalendarMonth = month === 0 ? 11 : month - 1;\n  const nextCalendarYear = month === 11 ? year + 1 : year;\n  const nextCalendarMonth = month === 11 ? 0 : month + 1;\n\n  const schedules = useFetchSchedules(\n    teamPlaceId,\n    generateCalendarRangeByYearMonth(year, month),\n  );\n  usePrefetchSchedules(\n    teamPlaceId,\n    generateCalendarRangeByYearMonth(prevCalendarYear, prevCalendarMonth),\n  );\n  usePrefetchSchedules(\n    teamPlaceId,\n    generateCalendarRangeByYearMonth(nextCalendarYear, nextCalendarMonth),\n  );\n\n  const [clickedDate, setClickedDate] = useState(currentDate);\n  const [modalType, setModalType] = useState<ModalOpenType>(\n    MODAL_OPEN_TYPE.ADD,\n  );\n  const [dailyModalDate, setDailyModalDate] = useState<Date>(new Date());\n  const [dailyModalPosition, setDailyModalPosition] = useState<Position>({\n    row: 0,\n    column: 0,\n  });\n  const calendarRef = useRef<HTMLDivElement>(null);\n  const { width, left } = useCalendarResizePosition(calendarRef);\n\n  const scheduleBars = generateScheduleBars(year, month, schedules);\n\n  const handleModalOpen = (modalOpenType: ModalOpenType) => {\n    setModalType(() => modalOpenType);\n    openModal();\n  };\n\n  const handleDailyScheduleModalOpen = (\n    day: Date,\n    row: number,\n    col: number,\n  ) => {\n    setModalType(() => MODAL_OPEN_TYPE.DAILY);\n    setDailyModalDate(() => day);\n    setDailyModalPosition({\n      row,\n      column: col,\n    });\n    openModal();\n  };\n\n  const handleDateCellClick = (clickedDate: Date) => {\n    setClickedDate(() => clickedDate);\n    handleModalOpen(MODAL_OPEN_TYPE.ADD);\n  };\n\n  const handleScheduleAddButtonClick = () => {\n    setClickedDate(() => currentDate);\n    handleModalOpen(MODAL_OPEN_TYPE.ADD);\n  };\n\n  const handleExportButtonClick = () => {\n    handleModalOpen(MODAL_OPEN_TYPE.EXPORT);\n  };\n\n  const getModal = (modalOpenType: ModalOpenType) => {\n    if (modalOpenType === MODAL_OPEN_TYPE.ADD) {\n      return (\n        <ScheduleAddModal\n          calendarSize={calendarSize}\n          clickedDate={clickedDate}\n        />\n      );\n    }\n\n    if (modalOpenType === MODAL_OPEN_TYPE.VIEW) {\n      return (\n        <ScheduleModal\n          calendarWidth={width}\n          calendarLeft={left}\n          calendarSize={calendarSize}\n          scheduleId={modalScheduleId}\n          position={modalPosition}\n          onOpenScheduleEditModal={() => handleModalOpen(MODAL_OPEN_TYPE.EDIT)}\n        />\n      );\n    }\n\n    if (modalOpenType === MODAL_OPEN_TYPE.EDIT) {\n      return (\n        <ScheduleEditModal\n          calendarSize={calendarSize}\n          scheduleId={modalScheduleId}\n          initialSchedule={schedules.find(\n            (schedule) => schedule.id === modalScheduleId,\n          )}\n        />\n      );\n    }\n\n    if (modalOpenType === MODAL_OPEN_TYPE.DAILY) {\n      return (\n        <DailyScheduleModal\n          calendarWidth={width}\n          calendarLeft={left}\n          calendarSize={calendarSize}\n          rawDate={dailyModalDate}\n          position={dailyModalPosition}\n          onScheduleModalOpen={handleScheduleModalOpen}\n          onSetModalType={() => setModalType(() => MODAL_OPEN_TYPE.VIEW)}\n        />\n      );\n    }\n\n    if (modalOpenType === MODAL_OPEN_TYPE.EXPORT) {\n      return <ICalendarModal calendarSize={calendarSize} />;\n    }\n\n    return null;\n  };\n\n  const modal = isModalOpen ? getModal(modalType) : null;\n\n  return (\n    <>\n      <S.Container $calendarSize={calendarSize}>\n        <S.CalendarHeader>\n          <Spacing direction=\"horizontal\" size={56} />\n          <S.ButtonContainer>\n            <Button\n              variant=\"plain\"\n              onClick={handlePrevButtonClick}\n              aria-label=\"이전 달로 이동하기\"\n              css={S.arrowButton(calendarSize)}\n            >\n              <ArrowLeftIcon />\n            </Button>\n            <time>\n              <Text weight=\"semiBold\" css={S.calendarTitle(calendarSize)}>\n                {year}년 {month + 1}월\n              </Text>\n            </time>\n            <Button\n              variant=\"plain\"\n              onClick={handleNextButtonClick}\n              css={S.arrowButton(calendarSize)}\n              aria-label=\"다음 달로 이동하기\"\n            >\n              <ArrowRightIcon />\n            </Button>\n          </S.ButtonContainer>\n          <S.FeatureButtonContainer>\n            <Button\n              css={S.exportButton(calendarSize)}\n              onClick={handleExportButtonClick}\n              aria-label=\"일정 내보내기\"\n            >\n              <ExportIcon />\n            </Button>\n            <Button\n              css={S.scheduleAddButton(calendarSize)}\n              onClick={handleScheduleAddButtonClick}\n              aria-label=\"새로운 일정 등록하기\"\n            >\n              <PlusIcon />\n            </Button>\n          </S.FeatureButtonContainer>\n        </S.CalendarHeader>\n        <div ref={calendarRef}>\n          <S.DaysOfWeek $calendarSize={calendarSize}>\n            {DAYS_OF_WEEK.map((day) => {\n              return <S.DayOfWeek key={day}>{day}</S.DayOfWeek>;\n            })}\n          </S.DaysOfWeek>\n          <S.CalendarGrid>\n            {calendar.map((week, rowIndex) => {\n              return (\n                <Fragment key={rowIndex}>\n                  <S.ScheduleBarContainer>\n                    {scheduleBars.map((scheduleBar) => {\n                      const {\n                        id,\n                        scheduleId,\n                        row,\n                        column,\n                        level,\n                        duration,\n                        schedule,\n                      } = scheduleBar;\n\n                      if (row === rowIndex && level > 2)\n                        return arrayOf(duration).map((_, index) => {\n                          const date = getDateByPosition(\n                            year,\n                            month,\n                            row,\n                            column + index,\n                          );\n\n                          return (\n                            <ScheduleMoreCell\n                              key={id + index}\n                              calendarSize={calendarSize}\n                              column={column + index}\n                              onClick={() =>\n                                handleDailyScheduleModalOpen(\n                                  date,\n                                  row,\n                                  column + index,\n                                )\n                              }\n                            />\n                          );\n                        });\n\n                      if (row === rowIndex)\n                        return (\n                          <ScheduleBar\n                            key={id}\n                            calendarSize={calendarSize}\n                            onClick={() => {\n                              setModalType(() => MODAL_OPEN_TYPE.VIEW);\n                              handleScheduleModalOpen({\n                                scheduleId,\n                                row,\n                                column,\n                                level,\n                              });\n                            }}\n                            onDragStart={(e) =>\n                              handleDragStart(e, level, schedule)\n                            }\n                            {...scheduleBar}\n                          />\n                        );\n\n                      return null;\n                    })}\n                  </S.ScheduleBarContainer>\n                  <S.DateView $calendarSize={calendarSize}>\n                    {week.map((day, colIndex) => {\n                      const {\n                        year: renderYear,\n                        month: renderMonth,\n                        date: renderDate,\n                      } = parseDate(day);\n\n                      const isToday =\n                        today.year === renderYear &&\n                        today.month === renderMonth &&\n                        today.date === renderDate;\n\n                      return (\n                        <DateCell\n                          key={day.toISOString()}\n                          rawDate={day}\n                          currentMonth={month}\n                          isToday={isToday}\n                          onClick={() => {\n                            handleDateCellClick(day);\n                          }}\n                          onDayClick={(e) => {\n                            e.stopPropagation();\n                            handleDailyScheduleModalOpen(\n                              day,\n                              rowIndex,\n                              colIndex,\n                            );\n                          }}\n                        />\n                      );\n                    })}\n                  </S.DateView>\n                </Fragment>\n              );\n            })}\n            <CalendarDragScreen\n              calendarSize={calendarSize}\n              year={year}\n              month={month}\n              dragStatus={dragStatus}\n              onMouseUp={handleMouseUp}\n            />\n          </S.CalendarGrid>\n        </div>\n      </S.Container>\n      {modal}\n    </>\n  );\n};\n\nexport default TeamCalendar;\n","import { css, styled } from 'styled-components';\nimport type { DateCellSize } from '~/types/size';\n\ninterface WrapperProps {\n  isSunday: boolean;\n  isSaturday: boolean;\n  size: DateCellSize;\n}\n\nexport const Wrapper = styled.div.withConfig({\n  shouldForwardProp: (prop) =>\n    !['isSunday', 'isSaturday', 'size'].includes(prop),\n})<WrapperProps>`\n  display: flex;\n  flex-direction: column;\n\n  ${({ size }) => {\n    if (size === 'sm')\n      return css`\n        align-items: center;\n        padding-top: 4px;\n      `;\n    if (size === 'md' || size === 'lg')\n      return css`\n        align-items: flex-end;\n        padding: 2px 2px 0 0;\n\n        text-align: right;\n      `;\n  }};\n\n  color: ${({ isSaturday, isSunday, theme }) => {\n    if (isSunday) return theme.color.RED;\n    if (isSaturday) return theme.color.PURPLE;\n    return theme.color.BLACK;\n  }};\n\n  cursor: pointer;\n`;\n\nexport const DateBadge = styled.div<{\n  $isToday: boolean;\n  $isCurrentMonth: boolean;\n}>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 24px;\n  height: 24px;\n\n  border-radius: 50%;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.color.GRAY300};\n  }\n  background-color: ${({ $isToday, theme, $isCurrentMonth }) => {\n    if ($isToday && $isCurrentMonth) return theme.color.BLACK;\n    if ($isToday) return theme.color.GRAY400;\n  }};\n`;\n\nexport const dateText = (\n  isCurrentMonth: boolean,\n  isToday: boolean,\n  isSaturday: boolean,\n  isSunday: boolean,\n  size: DateCellSize,\n) => css`\n  color: ${({ theme }) => {\n    if (isToday) {\n      return theme.color.WHITE;\n    }\n\n    if (isSunday) {\n      return theme.color.RED;\n    }\n\n    if (isSaturday) {\n      return theme.color.PURPLE;\n    }\n\n    return theme.color.BLACK;\n  }};\n  font-size: ${size === 'sm' ? 14 : 12}px;\n\n  opacity: ${isCurrentMonth ? 1 : 0.3};\n`;\n","import styled, { css } from 'styled-components';\nimport type { SpacingProps } from '~/components/common/Spacing/Spacing';\n\nexport const SpacingRoot = styled.div.withConfig({\n  shouldForwardProp: (prop) => !['size', 'direction'].includes(prop),\n})<SpacingProps>`\n  ${({ direction, size }) => {\n    if (direction === 'vertical') {\n      return css`\n        width: 1px;\n        height: ${size}px;\n      `;\n    }\n\n    if (direction === 'horizontal') {\n      return css`\n        width: ${size}px;\n        height: 1px;\n      `;\n    }\n  }}\n`;\n","import { type CSSProp, css, styled } from 'styled-components';\nimport type { CalendarSize } from '~/types/size';\nimport type { TeamPlaceColor } from '~/types/team';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nexport const Container = styled.div<{ $css: CSSProp }>`\n  display: flex;\n  position: absolute;\n  flex-direction: column;\n  z-index: ${({ theme }) => theme.zIndex.MODAL};\n\n  width: 250px;\n  max-height: 338px;\n  padding: 10px 20px 20px 20px;\n\n  border-radius: 10px;\n  background-color: ${({ theme }) => theme.color.WHITE};\n\n  box-shadow:\n    0 0 1px #1b1d1f33,\n    0 15px 25px #1b1d1f33,\n    0 5px 10px #1b1d1f1f;\n\n  ${({ $css }) => $css};\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  width: 100%;\n  height: 38px;\n  padding-bottom: 4px;\n  margin-bottom: 12px;\n\n  border-bottom: ${({ theme }) => `1px solid ${theme.color.GRAY300}`};\n`;\n\nexport const ScheduleWrapper = styled.div`\n  display: flex;\n  position: relative;\n  flex-wrap: wrap;\n  overflow: auto;\n\n  width: 100%;\n  max-height: 80%;\n  height: auto;\n\n  gap: 10px;\n`;\n\nexport const ScheduleBox = styled.div<{ $teamPlaceColor: TeamPlaceColor }>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 100%;\n  height: 40px;\n  column-gap: 10px;\n\n  background-color: ${({ theme, $teamPlaceColor }) =>\n    theme.teamColor[$teamPlaceColor]};\n  border-radius: 4px;\n\n  color: ${({ theme }) => theme.color.WHITE};\n\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.8;\n    transition: 0.2s;\n  }\n`;\n\nexport const closeButton = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  width: 22px;\n  height: 38px;\n  padding: 8px 0;\n`;\n\nexport const teamName = css`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  max-width: 200px;\n`;\n\nexport const modalLocation = (\n  row: number,\n  column: number,\n  calendarWidth: number,\n  calendarLeft: number,\n  calendarSize: CalendarSize,\n  isMobile: boolean,\n) => {\n  if (isMobile)\n    return css`\n      top: 50%;\n      left: 50%;\n\n      transform: translate(-50%, -50%);\n    `;\n\n  if (calendarSize === 'md')\n    return css`\n      position: absolute;\n      top: ${(row > 3 ? -228 : 0) + 148 + 110 * row}px;\n      left: ${(column > 3 ? -250 : calendarWidth / 7) +\n      calendarLeft +\n      (calendarWidth * column) / 7}px;\n    `;\n\n  if (calendarSize == 'sm')\n    return css`\n      position: fixed;\n      top: 23%;\n      left: 19%;\n    `;\n};\n","import { styled } from 'styled-components';\r\n\r\nexport const Container = styled.div.attrs<{\r\n  $relativeX: number;\r\n  $relativeY: number;\r\n}>(({ $relativeX, $relativeY }) => ({\r\n  style: {\r\n    transform: `translate(${$relativeX}px, ${$relativeY}px)`,\r\n  },\r\n}))`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: absolute;\r\n\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport const CalendarRow = styled.div`\r\n  position: relative;\r\n  flex-grow: 1;\r\n`;\r\n","import styled, { css } from 'styled-components';\nimport type { CalendarSize } from '~/types/size';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n\n  width: 100%;\n  height: 100%;\n`;\n\nexport const Container = styled.div<{\n  $calendarSize: CalendarSize;\n  $isMobile: boolean;\n}>`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  ${({ $calendarSize, $isMobile }) => {\n    if ($calendarSize === 'md' || $isMobile) {\n      return css`\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n      `;\n    }\n\n    if ($calendarSize === 'sm') {\n      return css`\n        top: 25%;\n        left: 14.4%;\n      `;\n    }\n  }}\n\n  ${({ $isMobile }) => {\n    if ($isMobile)\n      return css`\n        width: 300px;\n        height: 180px;\n        padding: 10px 20px;\n      `;\n\n    return css`\n      width: 360px;\n      height: 190px;\n      padding: 16px;\n    `;\n  }}\n \n  border-radius: 8px;\n  box-shadow:\n    0 0 1px #1b1d1f33,\n    0 15px 25px #1b1d1f33,\n    0 5px 10px #1b1d1f1f;\n  background-color: ${({ theme }) => theme.color.WHITE};\n`;\n\nexport const Header = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n\n  & > button {\n    margin-left: auto;\n  }\n`;\n\nexport const TooltipWrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  cursor: help;\n`;\n\nexport const Tooltip = styled.div`\n  position: absolute;\n  top: 30px;\n  left: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 320px;\n  height: 100px;\n  padding: 10px 20px;\n\n  border: 1px solid ${({ theme }) => theme.color.GRAY300};\n  border-radius: 8px;\n  background-color: ${({ theme }) => theme.color.WHITE};\n\n  & > p {\n    line-height: 1.3;\n  }\n`;\n\nexport const UrlContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  border: 1px solid ${({ theme }) => theme.color.GRAY300};\n  border-radius: 8px;\n\n  margin: 10px 0 20px 0;\n`;\n\nexport const UrlWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 90%;\n  height: 36px;\n  padding: 0 8px;\n\n  & > div {\n    width: 100%;\n\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n\nexport const UserGuideLink = styled.a`\n  align-self: flex-start;\n`;\n\nexport const closeButton = css`\n  width: 28px;\n  height: 28px;\n  padding: 0;\n  margin-bottom: 4px;\n\n  svg {\n    width: 28px;\n    height: 28px;\n  }\n`;\n\nexport const copyButton = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 32px;\n  height: 40px;\n  padding: 0;\n\n  background-color: ${({ theme }) => theme.color.GRAY100};\n  border-radius: 0 8px 8px 0;\n`;\n\nexport const shortcutText = css`\n  color: ${({ theme }) => theme.color.GRAY800};\n`;\n","import { styled, css } from 'styled-components';\nimport type { CalendarSize } from '~/types/size';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const Container = styled.div<{\n  $calendarSize: CalendarSize;\n  $isMobile: boolean;\n}>`\n  display: flex;\n  flex-direction: column;\n  position: fixed;\n  ${({ $calendarSize, $isMobile }) => {\n    if ($calendarSize === 'md' || $isMobile)\n      return css`\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n      `;\n\n    if ($calendarSize === 'sm')\n      return css`\n        top: 20%;\n        left: 13.5%;\n      `;\n  }}\n\n  ${({ $isMobile }) => {\n    if ($isMobile)\n      return css`\n        width: 300px;\n        padding: 10px 26px 20px;\n      `;\n\n    return css`\n      width: 400px;\n      min-height: 320px;\n      padding: 18px 22px;\n    `;\n  }}\n  \n  border-radius: 10px;\n  box-shadow:\n    0 0 1px #1b1d1f33,\n    0 15px 25px #1b1d1f33,\n    0 5px 10px #1b1d1f1f;\n  background-color: ${({ theme }) => theme.color.WHITE};\n\n  & > form {\n    display: flex;\n    flex-direction: column;\n\n    row-gap: ${({ $isMobile }) => ($isMobile ? '10px' : '16px')};\n  }\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: flex-end;\n\n  width: 100%;\n  height: 34px;\n  margin-bottom: 18px;\n\n  border-bottom: ${({ theme }) => `1px solid ${theme.color.GRAY300}`};\n`;\n\nexport const TitleWrapper = styled.div`\n  width: 100%;\n  height: 38px;\n`;\n\nexport const InnerContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  width: 100%;\n`;\n\nexport const CheckboxContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n\n  column-gap: 8px;\n`;\n\nexport const TimeSelectContainer = styled.div<{ $isMobile: boolean }>`\n  display: flex;\n\n  width: 100%;\n  height: ${({ $isMobile }) => ($isMobile ? '74px' : '40px')};\n\n  ${({ $isMobile }) => {\n    if ($isMobile)\n      return css`\n        flex-direction: column;\n        gap: 4px;\n      `;\n\n    return css`\n      align-items: center;\n    `;\n  }}\n`;\n\nexport const InputWrapper = styled.div<{ $isMobile: boolean }>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  width: ${({ $isMobile }) => !$isMobile && 'calc(100% - 80px)'};\n\n  margin-left: ${({ $isMobile }) => !$isMobile && 'auto'};\n`;\n\nexport const TeamNameContainer = styled.div`\n  display: flex;\n  align-items: center;\n\n  height: 23px;\n\n  gap: 5px;\n`;\n\nexport const ControlButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n\n  width: 100%;\n  height: 38px;\n`;\n\nexport const title = css`\n  padding: 10px 20px;\n\n  border: none;\n  border-radius: 10px;\n  background-color: ${({ theme }) => theme.color.GRAY200};\n\n  font-size: 18px;\n`;\n\nexport const closeButton = css`\n  width: 28px;\n  height: 28px;\n  padding: 0;\n  margin-bottom: 4px;\n\n  svg {\n    width: 28px;\n    height: 28px;\n  }\n`;\n\nexport const timetableButton = css`\n  width: 150px;\n  height: 40px;\n\n  border: 1px solid ${({ theme }) => theme.color.GRAY200};\n  border-radius: 4px;\n`;\n\nexport const dateTimeLocalInput = css`\n  border-radius: 4px;\n\n  text-align: center;\n`;\n\nexport const teamPlaceName = css`\n  overflow: hidden;\n\n  max-width: 250px;\n\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nexport const submitButton = css`\n  width: 80px;\n  padding: 0;\n`;\n","import { css, styled } from 'styled-components';\nimport type { ScheduleBarProps } from '~/components/team_calendar/ScheduleBar/ScheduleBar';\nimport type { CalendarSize } from '~/types/size';\nimport type { TeamPlaceColor } from '~/types/team';\n\ninterface InnerProps {\n  column: number;\n  duration: number;\n  level: number;\n  roundedStart: boolean;\n  roundedEnd: boolean;\n  mode: 'normal' | 'no-interaction' | 'indicator';\n  teamPlaceColor: TeamPlaceColor;\n}\n\nexport const Wrapper = styled.div.withConfig({\n  shouldForwardProp: (prop) =>\n    ![\n      'id',\n      'scheduleId',\n      'schedule',\n      'calendarSize',\n      'level',\n      'row',\n      'column',\n      'duration',\n      'roundedStart',\n      'roundedEnd',\n      'mode',\n    ].includes(prop),\n})<\n  Pick<\n    ScheduleBarProps,\n    | 'calendarSize'\n    | 'level'\n    | 'column'\n    | 'duration'\n    | 'roundedStart'\n    | 'roundedEnd'\n    | 'mode'\n  >\n>`\n  position: absolute;\n  ${({ calendarSize, level }) => {\n    if (calendarSize === 'md')\n      return css`\n        top: ${level * 18 + 36}px;\n        height: 16px;\n      `;\n    if (calendarSize === 'sm')\n      return css`\n        top: ${level * 14 + 22}px;\n        height: 12px;\n      `;\n  }}\n\n  left: ${({ column }) => (column * 100) / 7}%;\n  width: ${({ duration }) => (duration * 100) / 7}%;\n  padding: ${({ roundedStart, roundedEnd }) =>\n    `0 ${roundedEnd ? '4px' : 0} 0 ${roundedStart ? '4px' : 0}`};\n`;\n\nexport const Inner = styled.div.withConfig({\n  shouldForwardProp: (prop) =>\n    ![\n      'id',\n      'scheduleId',\n      'schedule',\n      'row',\n      'column',\n      'duration',\n      'level',\n      'roundedStart',\n      'roundedEnd',\n      'teamPlaceColor',\n      'mode',\n    ].includes(prop),\n})<InnerProps>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  height: 100%;\n  padding-left: 6px;\n\n  background-color: ${({ theme, teamPlaceColor = 0, mode }) =>\n    mode === 'indicator' ? 'transparent' : theme.teamColor[teamPlaceColor]};\n  border-radius: ${({ roundedStart, roundedEnd }) =>\n    `${roundedStart ? '4px' : '0'} ${roundedEnd ? '4px 4px' : '0 0'} ${\n      roundedStart ? '4px' : '0'\n    }`};\n\n  ${({ mode, theme }) =>\n    mode === 'indicator' &&\n    css`\n      margin-top: -2px;\n\n      border: 2px solid ${theme.color.GRAY400};\n\n      box-shadow: 0 0 24px ${theme.color.GRAY600};\n      box-sizing: content-box;\n    `};\n\n  ${({ mode, level }) =>\n    mode !== 'indicator' &&\n    css`\n      filter: brightness(${1 + level * 0.4});\n    `};\n\n  ${({ mode }) =>\n    mode === 'normal' &&\n    css`\n      cursor: pointer;\n\n      &:hover {\n        opacity: 0.8;\n      }\n    `};\n`;\n\nexport const scheduleBarTitle = (calendarSize: CalendarSize) => css`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  max-width: 100px;\n  height: 100%;\n\n  font-size: ${calendarSize === 'md' ? 12 : 10}px;\n  color: ${({ theme }) => theme.color.WHITE};\n`;\n","import { styled, css } from 'styled-components';\nimport type { CalendarSize } from '~/types/size';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const Container = styled.div<{\n  $calendarSize: CalendarSize;\n  $isMobile: boolean;\n}>`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  ${({ $calendarSize, $isMobile }) => {\n    if ($calendarSize === 'md' || $isMobile)\n      return css`\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n      `;\n\n    if ($calendarSize === 'sm')\n      return css`\n        top: 20%;\n        left: 13.5%;\n      `;\n  }}\n\n  ${({ $isMobile }) => {\n    if ($isMobile)\n      return css`\n        width: 300px;\n        padding: 10px 26px 20px;\n      `;\n\n    return css`\n      width: 400px;\n      min-height: 320px;\n      padding: 18px 22px;\n    `;\n  }}\n\n  border-radius: 10px;\n  box-shadow:\n    0 0 1px #1b1d1f33,\n    0 15px 25px #1b1d1f33,\n    0 5px 10px #1b1d1f1f;\n  background-color: ${({ theme }) => theme.color.WHITE};\n\n  & > form {\n    display: flex;\n    flex-direction: column;\n\n    row-gap: ${({ $isMobile }) => ($isMobile ? '10px' : '16px')};\n  }\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: flex-end;\n\n  width: 100%;\n  height: 34px;\n  margin-bottom: 18px;\n\n  border-bottom: ${({ theme }) => `1px solid ${theme.color.GRAY300}`};\n`;\n\nexport const TitleWrapper = styled.div`\n  width: 100%;\n  height: 38px;\n`;\n\nexport const InnerContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  width: 100%;\n`;\n\nexport const CheckboxContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n\n  column-gap: 8px;\n`;\n\nexport const TimeSelectContainer = styled.div<{ $isMobile: boolean }>`\n  display: flex;\n\n  width: 100%;\n  height: ${({ $isMobile }) => ($isMobile ? '74px' : '40px')};\n\n  ${({ $isMobile }) => {\n    if ($isMobile)\n      return css`\n        flex-direction: column;\n        gap: 4px;\n      `;\n\n    return css`\n      align-items: center;\n    `;\n  }}\n`;\n\nexport const InputWrapper = styled.div<{ $isMobile: boolean }>`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  width: ${({ $isMobile }) => !$isMobile && 'calc(100% - 80px)'};\n\n  margin-left: ${({ $isMobile }) => !$isMobile && 'auto'};\n`;\n\nexport const TeamNameContainer = styled.div`\n  display: flex;\n  align-items: center;\n\n  height: 23px;\n\n  gap: 5px;\n`;\n\nexport const ControlButtonWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n\n  width: 100%;\n  height: 38px;\n`;\n\nexport const title = css`\n  padding: 10px 20px;\n\n  border: none;\n  border-radius: 10px;\n  background-color: ${({ theme }) => theme.color.GRAY200};\n\n  font-size: 18px;\n`;\n\nexport const closeButton = css`\n  width: 28px;\n  height: 28px;\n  padding: 0;\n  margin-bottom: 4px;\n\n  svg {\n    width: 28px;\n    height: 28px;\n  }\n`;\n\nexport const dateTimeLocalInput = css`\n  border-radius: 4px;\n\n  text-align: center;\n`;\n\nexport const teamPlaceName = css`\n  overflow: hidden;\n\n  max-width: 250px;\n\n  text-overflow: ellipsis;\n  white-space: nowrap;\n`;\n\nexport const submitButton = css`\n  width: 80px;\n  padding: 0;\n`;\n","import { styled, css, type CSSProp } from 'styled-components';\nimport type { CalendarSize } from '~/types/size';\n\nexport const Container = styled.div<{ $css: CSSProp; $isMobile: boolean }>`\n  display: flex;\n  position: absolute;\n  flex-direction: column;\n  z-index: ${({ theme }) => theme.zIndex.MODAL};\n  gap: 16px;\n\n  ${({ $isMobile }) => {\n    if ($isMobile)\n      return css`\n        width: 300px;\n        padding: 10px 10px 20px 26px;\n      `;\n\n    return css`\n      width: 446px;\n      padding: 18px 22px;\n    `;\n  }}\n\n  border-radius: 10px;\n  background-color: ${({ theme }) => theme.color.WHITE};\n\n  box-shadow:\n    0 0 1px #1b1d1f33,\n    0 15px 25px #1b1d1f33,\n    0 5px 10px #1b1d1f1f;\n\n  ${({ $css }) => $css};\n`;\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const TeamWrapper = styled.div`\n  display: flex;\n  gap: 12px;\n`;\n\nexport const MenuContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n\n  gap: 6px;\n`;\n\nexport const PeriodWrapper = styled.div<{ $isMobile: boolean }>`\n  display: flex;\n\n  gap: 2px;\n\n  ${({ $isMobile }) => {\n    if ($isMobile)\n      return css`\n        flex-direction: column;\n      `;\n\n    return css`\n      align-items: center;\n    `;\n  }}\n`;\n\nexport const teamName = css`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  max-width: 200px;\n`;\n\nexport const menuIcon = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 28px;\n  height: 28px;\n  padding: 0;\n\n  border-radius: 8px;\n\n  svg {\n    width: 28px;\n    height: 28px;\n  }\n\n  &:hover {\n    background-color: ${({ theme }) => theme.color.GRAY100};\n  }\n`;\n\nexport const closeButton = ($isMobile: boolean) => css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-end;\n\n  width: 80px;\n  height: 42px;\n  ${$isMobile &&\n  css`\n    margin-right: 10px;\n  `}\n\n  cursor: pointer;\n`;\n\nexport const modalLocation = (\n  row: number,\n  column: number,\n  level: number,\n  calendarWidth: number,\n  calendarLeft: number,\n  calendarSize: CalendarSize,\n  isMobile: boolean,\n) => {\n  if (isMobile)\n    return css`\n      top: 50%;\n      left: 50%;\n\n      transform: translate(-50%, -50%);\n    `;\n\n  if (calendarSize === 'md')\n    return css`\n      position: absolute;\n      top: ${(row < 3 ? 92 : -128) + (row + 1) * 110 + level * 18}px;\n      left: ${(column > 3\n        ? calendarWidth / 7 - 446\n        : column === 3\n        ? calendarWidth / 14 - 223\n        : 0) +\n      calendarLeft +\n      (calendarWidth * column) / 7}px;\n    `;\n\n  if (calendarSize == 'sm')\n    return css`\n      position: fixed;\n      top: 26%;\n      left: 12%;\n    `;\n};\n\nexport const scheduleTitleText = css`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  width: 100%;\n`;\n","import Modal from '~/components/common/Modal/Modal';\nimport Text from '~/components/common/Text/Text';\nimport { useModal } from '~/hooks/useModal';\nimport * as S from './ScheduleModal.styled';\nimport { CloseIcon, DeleteIcon, EditIcon } from '~/assets/svg';\nimport Button from '~/components/common/Button/Button';\nimport type { SchedulePosition } from '~/types/schedule';\nimport { useFetchScheduleById } from '~/hooks/queries/useFetchScheduleById';\nimport { useDeleteSchedule } from '~/hooks/queries/useDeleteSchedule';\nimport TeamBadge from '~/components/team/TeamBadge/TeamBadge';\nimport { useToast } from '~/hooks/useToast';\nimport { useTeamPlace } from '~/hooks/useTeamPlace';\nimport type { CalendarSize } from '~/types/size';\nimport { getIsMobile } from '~/utils/getIsMobile';\nimport { generateDateTimeRangeDescription } from '~/utils/generateDateTimeRangeDescription';\n\ninterface ScheduleModalProps {\n  calendarWidth: number;\n  calendarLeft: number;\n  calendarSize?: CalendarSize;\n  scheduleId: number;\n  position: SchedulePosition;\n  onOpenScheduleEditModal: () => void;\n}\n\nconst ScheduleModal = (props: ScheduleModalProps) => {\n  const {\n    calendarWidth,\n    calendarLeft,\n    scheduleId,\n    position,\n    onOpenScheduleEditModal,\n    calendarSize = 'md',\n  } = props;\n  const { closeModal } = useModal();\n  const { showToast } = useToast();\n  const { teamPlaceColor, teamPlaceId, displayName } = useTeamPlace();\n  const isMobile = getIsMobile();\n\n  const { scheduleById } = useFetchScheduleById(teamPlaceId, scheduleId);\n  const { mutateDeleteSchedule } = useDeleteSchedule(teamPlaceId, scheduleId);\n\n  if (scheduleById === undefined) return;\n  const { title, startDateTime, endDateTime } = scheduleById;\n  const { row, column, level } = position;\n\n  const handleScheduleDelete = () => {\n    if (confirm('일정을 삭제하시겠어요?')) {\n      mutateDeleteSchedule(undefined, {\n        onSuccess: () => {\n          showToast('success', '일정이 삭제되었습니다.');\n          closeModal();\n        },\n      });\n    }\n  };\n\n  return (\n    <Modal>\n      <S.Backdrop onClick={closeModal} />\n      <S.Container\n        $isMobile={isMobile}\n        $css={S.modalLocation(\n          row,\n          column,\n          level,\n          calendarWidth,\n          calendarLeft,\n          calendarSize,\n          isMobile,\n        )}\n      >\n        <S.Header>\n          <S.TeamWrapper>\n            <TeamBadge teamPlaceColor={teamPlaceColor} size=\"lg\" />\n            {!isMobile && (\n              <div title={displayName}>\n                <Text css={S.teamName}>{displayName}</Text>\n              </div>\n            )}\n          </S.TeamWrapper>\n          <S.MenuContainer>\n            <Button\n              type=\"button\"\n              variant=\"plain\"\n              onClick={onOpenScheduleEditModal}\n              css={S.menuIcon}\n            >\n              <EditIcon />\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"plain\"\n              onClick={handleScheduleDelete}\n              css={S.menuIcon}\n            >\n              <DeleteIcon />\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"plain\"\n              onClick={closeModal}\n              css={S.menuIcon}\n            >\n              <CloseIcon />\n            </Button>\n          </S.MenuContainer>\n        </S.Header>\n        <Text size=\"xxl\" weight=\"bold\" css={S.scheduleTitleText}>\n          {title}\n        </Text>\n        <S.PeriodWrapper $isMobile={isMobile}>\n          <time>\n            <Text>\n              {generateDateTimeRangeDescription(startDateTime, endDateTime)}\n            </Text>\n          </time>\n        </S.PeriodWrapper>\n        <Button\n          type=\"button\"\n          variant=\"primary\"\n          css={S.closeButton(isMobile)}\n          onClick={closeModal}\n        >\n          확인\n        </Button>\n      </S.Container>\n    </Modal>\n  );\n};\n\nexport default ScheduleModal;\n","import { css, styled } from 'styled-components';\nimport type { ScheduleMoreCellProps } from '~/components/team_calendar/ScheduleMoreCell/ScheduleMoreCell';\n\nexport const Wrapper = styled.div.withConfig({\n  shouldForwardProp: (prop) => !['column', 'calendarSize'].includes(prop),\n})<Pick<ScheduleMoreCellProps, 'column' | 'calendarSize'>>`\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  top: ${({ calendarSize }) => (calendarSize === 'md' ? 90 : 62)}px;\n  left: ${({ column }) => (column * 100) / 7}%;\n\n  width: calc(100% / 7);\n  height: 16px;\n\n  cursor: pointer;\n  &:hover {\n    background-color: ${({ theme }) => theme.color.GRAY200};\n  }\n\n  @media screen and (max-width: 800px) {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n`;\n\nexport const moreText = css`\n  color: ${({ theme }) => theme.color.GRAY500};\n`;\n"],"names":[],"sourceRoot":""}