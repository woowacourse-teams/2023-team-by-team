{"version":3,"file":"components-team_calendar-TimeTableMenu-TimeTableMenu-stories.51ac6bc2.iframe.bundle.js","mappings":";AAaA;AACA;AAGA;AACA;AACA;AACA;AAGA;;AAEA;AAIA;;;;;AAOA;AAEA;;;AAIA;;AAIA;;;;;;;;;;;;AAeA;;AAGA;;;ACzDA;;;AAGA;;;AAGA;;AAEA;;ACHA;;;;;;;;;;;;;ACIA;;;;AAIA;;;AAGA;AAGA;;;ACfA;;ACJA;;;;;;;;;;;;;;;;;;;;;;;;;ACyCA;AACA;;;AAGA;;;ACjDA;;;AAGA;;ACaA","sources":["webpack://frontend/./src/components/common/Button/Button.styled.ts","webpack://frontend/./src/components/common/Menu/MenuList/MenuList.styled.ts","webpack://frontend/./src/components/common/Menu/MenuList/MenuList.tsx","webpack://frontend/./src/components/common/Menu/MenuItem/MenuItem.styled.ts","webpack://frontend/./src/components/common/Menu/MenuItem/MenuItem.tsx","webpack://frontend/./src/components/common/Menu/Menu.tsx","webpack://frontend/./src/components/common/Text/Text.styled.ts","webpack://frontend/./src/components/team_calendar/TimeTableMenu/TimeTableMenu.styled.ts","webpack://frontend/./src/components/team_calendar/TimeTableMenu/TimeTableMenu.tsx"],"sourcesContent":["import { styled, css } from 'styled-components';\r\nimport type { CSSProp } from 'styled-components';\r\nimport type { ButtonVariant, ButtonProps } from './Button';\r\nimport type { ButtonSize } from '~/types/size';\r\n\r\nconst paddingSize: Record<ButtonSize, string> = {\r\n  sm: '6px',\r\n  md: '12px',\r\n  lg: '18px',\r\n};\r\n\r\nconst variants: Record<ButtonVariant, CSSProp> = {\r\n  primary: css`\r\n    background-color: ${({ theme }) => theme.color.PRIMARY};\r\n    color: ${({ theme }) => theme.color.WHITE};\r\n  `,\r\n\r\n  normal: css`\r\n    background-color: ${({ theme }) => theme.color.WHITE};\r\n    color: ${({ theme }) => theme.color.GRAY900};\r\n    border: 1px solid ${({ theme }) => theme.color.GRAY300};\r\n  `,\r\n\r\n  plain: css`\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.color.GRAY900};\r\n  `,\r\n};\r\n\r\nexport const ButtonWrapper = styled.button.withConfig({\r\n  shouldForwardProp: (prop) => !['css', 'variant', 'size'].includes(prop),\r\n})<ButtonProps>`\r\n  font-size: 16px;\r\n  line-height: 16px;\r\n  text-align: center;\r\n\r\n  ${({ size = 'md' }) => {\r\n    return css`\r\n      padding: ${paddingSize[size]};\r\n    `;\r\n  }};\r\n\r\n  ${({ variant = 'primary' }) => {\r\n    return variants[variant];\r\n  }};\r\n\r\n  ${({ variant = 'primary' }) => {\r\n    if (variant !== 'plain') {\r\n      return css`\r\n        &:disabled {\r\n          opacity: 0.6;\r\n        }\r\n\r\n        &:not([disabled]):hover {\r\n          opacity: 0.8;\r\n        }\r\n\r\n        border-radius: 4px;\r\n\r\n        transition: 0.2s;\r\n      `;\r\n    }\r\n  }};\r\n\r\n  ${(props) => props.css}\r\n`;\r\n","import { styled } from 'styled-components';\nimport type { MenuListProps } from '~/components/common/Menu/MenuList/MenuList';\n\nexport const Wrapper = styled.ul.withConfig({\n  shouldForwardProp: (prop) => !['width'].includes(prop),\n})<MenuListProps>`\n  position: absolute;\n  z-index: ${({ theme }) => theme.zIndex.MENU};\n\n  max-height: 200px;\n  width: ${({ width }) => width};\n  overflow-y: auto;\n\n  background-color: ${({ theme }) => theme.color.WHITE};\n\n  border: 1px solid ${({ theme }) => theme.color.GRAY200};\n  border-radius: 6px;\n`;\n","import { useRef, useEffect } from 'react';\nimport type { MouseEventHandler, PropsWithChildren } from 'react';\nimport { useMenu } from '~/hooks/useMenu';\nimport { useClickOutside } from '~/hooks/useClickOutside';\nimport { useListKeyboardNavigation } from '~/hooks/useListKeyboardNavigation';\nimport * as S from './MenuList.styled';\n\nexport interface MenuListProps {\n  width?: string;\n  onSelect?: (value: string) => void;\n}\n\nconst MenuList = (props: PropsWithChildren<MenuListProps>) => {\n  const { children, onSelect, width = '100%' } = props;\n\n  const {\n    isMenuOpen,\n    selectedValue,\n    handleMenuOpen,\n    handleSelectedValueChange,\n  } = useMenu();\n\n  const ref = useRef<HTMLUListElement>(null);\n\n  useClickOutside(ref, (e: Event) => {\n    const { target } = e;\n\n    if (target instanceof HTMLButtonElement) {\n      return;\n    }\n\n    if ((target as HTMLElement).closest('button')) {\n      return;\n    }\n\n    handleMenuOpen();\n  });\n\n  const handleMenuClick: MouseEventHandler<HTMLUListElement> = (e) => {\n    const { target } = e;\n\n    if (!(target instanceof HTMLLIElement)) {\n      return;\n    }\n\n    const { textContent } = target;\n\n    if (!textContent) {\n      return;\n    }\n\n    selectItem(textContent);\n  };\n\n  const selectItem = (value: string) => {\n    onSelect?.(value);\n    handleSelectedValueChange(value);\n    handleMenuOpen();\n  };\n\n  const {\n    handlers: { handleMouseEnter, handleMouseLeave, handleKeyDown },\n  } = useListKeyboardNavigation(ref, handleMenuOpen, selectItem);\n\n  useEffect(() => {\n    if (isMenuOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isMenuOpen]);\n\n  useEffect(() => {\n    if (selectedValue === '' || !isMenuOpen) {\n      return;\n    }\n\n    if (!ref.current) {\n      return;\n    }\n\n    const target = Array.from(ref.current.children).find(\n      (child) => child.textContent?.replace('✓', '') === selectedValue,\n    );\n\n    if (!(target instanceof HTMLLIElement)) {\n      return;\n    }\n\n    const { offsetTop } = target;\n\n    ref.current.scrollTo(0, offsetTop);\n  }, [isMenuOpen, selectedValue]);\n\n  return (\n    <>\n      {isMenuOpen && (\n        <S.Wrapper\n          role=\"menu\"\n          ref={ref}\n          width={width}\n          onClick={handleMenuClick}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          onKeyDown={handleKeyDown}\n          tabIndex={0}\n        >\n          {children}\n        </S.Wrapper>\n      )}\n    </>\n  );\n};\n\nexport default MenuList;\n","import { css, styled } from 'styled-components';\nimport type { MenuItemProps } from '~/components/common/Menu/MenuItem/MenuItem';\n\nexport const Wrapper = styled.li<Omit<MenuItemProps, 'value'>>`\n  position: relative;\n\n  padding: 8px 26px;\n\n  cursor: pointer;\n\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  text-align: center;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.color.GRAY100};\n  }\n\n  &.selected {\n    background-color: ${({ theme }) => theme.color.GRAY200};\n  }\n\n  ${({ css }) => css}\n`;\n\nexport const checkMark = css`\n  position: absolute;\n  left: 10px;\n`;\n","import type { PropsWithChildren } from 'react';\nimport type { CSSProp } from 'styled-components';\nimport Text from '~/components/common/Text/Text';\nimport { useMenu } from '~/hooks/useMenu';\nimport * as S from './MenuItem.styled';\n\nexport interface MenuItemProps {\n  value: string;\n  css?: CSSProp;\n}\n\nconst MenuItem = (props: PropsWithChildren<MenuItemProps>) => {\n  const { children, value, css } = props;\n  const { selectedValue } = useMenu();\n  const isSelected = selectedValue === value;\n\n  return (\n    <>\n      <S.Wrapper\n        role=\"menuitem\"\n        css={css}\n        className={isSelected ? 'selected' : ''}\n      >\n        {isSelected && (\n          <Text as=\"span\" css={S.checkMark}>\n            ✓\n          </Text>\n        )}\n        {children}\n      </S.Wrapper>\n    </>\n  );\n};\n\nexport default MenuItem;\n","import type { PropsWithChildren } from 'react';\nimport { MenuProvider } from '~/components/common/Menu/MenuContext';\nimport MenuButton from '~/components/common/Menu/MenuButton/MenuButton';\nimport MenuList from '~/components/common/Menu/MenuList/MenuList';\nimport MenuItem from '~/components/common/Menu/MenuItem/MenuItem';\nimport * as S from './Menu.styled';\n\nconst Menu = (props: PropsWithChildren) => {\n  const { children } = props;\n\n  return (\n    <MenuProvider>\n      <S.Wrapper>{children}</S.Wrapper>\n    </MenuProvider>\n  );\n};\n\nMenu.Button = MenuButton;\nMenu.List = MenuList;\nMenu.Item = MenuItem;\n\nexport default Menu;\n","import { styled } from 'styled-components';\nimport type { TextSize } from '~/types/size';\nimport type { TextProps, Weight } from './Text';\n\nconst fontWeight: Record<Weight, number> = {\n  light: 100,\n  normal: 400,\n  semiBold: 600,\n  bold: 800,\n};\n\nconst fontSize: Record<TextSize, string> = {\n  xxs: '10px',\n  xs: '12px',\n  sm: '14px',\n  md: '16px',\n  lg: '18px',\n  xl: '20px',\n  xxl: '22px',\n};\n\nexport const TextWrapper = styled.p.withConfig({\n  shouldForwardProp: (prop) => !['size', 'weight', 'css'].includes(prop),\n})<TextProps>`\n  h1&,\n  h2&,\n  h3&,\n  h4&,\n  h5&,\n  h6& {\n    font-weight: bold;\n  }\n  h1& {\n    font-size: 36px;\n  }\n  h2& {\n    font-size: 32px;\n  }\n  h3& {\n    font-size: 28px;\n  }\n  h4& {\n    font-size: 24px;\n  }\n  p&,\n  span&,\n  strong&,\n  small& {\n    font-size: ${({ size = 'md' }) => fontSize[size] || 'initial'};\n    font-weight: ${({ weight = 'normal' }) => fontWeight[weight] || 'initial'};\n  }\n  && {\n    ${(props) => props.css}\n  }\n`;\n","import { css } from 'styled-components';\n\nexport const timeTableButton = ($isMobile: boolean) => css`\n  width: ${$isMobile ? '100px' : '130px'};\n  height: 40px;\n\n  border: 1px solid ${({ theme }) => theme.color.GRAY200};\n  border-radius: 4px;\n`;\n","import Menu from '~/components/common/Menu/Menu';\nimport { TIME_TABLE } from '~/constants/calendar';\nimport * as S from './TimeTableMenu.styled';\nimport { getIsMobile } from '~/utils/getIsMobile';\n\ninterface TimeTableMenuProps {\n  displayValue: string;\n  onSelect: (value: string) => void;\n}\n\nconst TimeTableMenu = (props: TimeTableMenuProps) => {\n  const { displayValue, onSelect } = props;\n  const isMobile = getIsMobile();\n  const handleSelect = (value: string) => {\n    onSelect(value);\n  };\n\n  return (\n    <Menu>\n      <Menu.Button css={S.timeTableButton(isMobile)} value={displayValue} />\n      <Menu.List onSelect={handleSelect}>\n        {TIME_TABLE.map((time) => (\n          <Menu.Item key={time} value={time}>\n            {time}\n          </Menu.Item>\n        ))}\n      </Menu.List>\n    </Menu>\n  );\n};\n\nexport default TimeTableMenu;\n"],"names":[],"sourceRoot":""}