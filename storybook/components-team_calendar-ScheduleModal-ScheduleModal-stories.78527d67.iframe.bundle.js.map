{"version":3,"file":"components-team_calendar-ScheduleModal-ScheduleModal-stories.78527d67.iframe.bundle.js","mappings":";AAaA;AACA;AAGA;AACA;AACA;AACA;AAGA;;AAEA;AAIA;;;;;AAOA;AAEA;;;AAIA;;AAIA;;;;;;;;;;;;AAeA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;;;AAGA;;;AC9CA;;;AAMA;;;AAKA;;;;;;AAOA;;;;;ACjBA;;;AAGA;;;AAOA;;;;;;AAOA;;;;;;;AAOA;AAGA;;;;;;AAQA;;;;AAMA;;;AAKA;;;;;;AAQA;;;;;AAKA;;AAMA;;;AAMA;;;;;;AAQA;;;;;;;;;;;;;;;;;AAiBA;;AAoBA;;;;;AAiBA;;AAGA;AACA;AASA;;;;AAAA;;;;;;;;;;;;;;AAtCA;;;;;ACOA","sources":["webpack://frontend/./src/components/common/Button/Button.styled.ts","webpack://frontend/./src/components/common/Text/Text.styled.ts","webpack://frontend/./src/components/team/TeamBadge/TeamBadge.styled.ts","webpack://frontend/./src/components/team_calendar/ScheduleModal/ScheduleModal.styled.ts","webpack://frontend/./src/components/team_calendar/ScheduleModal/ScheduleModal.tsx"],"sourcesContent":["import { styled, css } from 'styled-components';\r\nimport type { CSSProp } from 'styled-components';\r\nimport type { ButtonVariant, ButtonProps } from './Button';\r\nimport type { ButtonSize } from '~/types/size';\r\n\r\nconst paddingSize: Record<ButtonSize, string> = {\r\n  sm: '6px',\r\n  md: '12px',\r\n  lg: '18px',\r\n};\r\n\r\nconst variants: Record<ButtonVariant, CSSProp> = {\r\n  primary: css`\r\n    background-color: ${({ theme }) => theme.color.PRIMARY};\r\n    color: ${({ theme }) => theme.color.WHITE};\r\n  `,\r\n\r\n  normal: css`\r\n    background-color: ${({ theme }) => theme.color.WHITE};\r\n    color: ${({ theme }) => theme.color.GRAY900};\r\n    border: 1px solid ${({ theme }) => theme.color.GRAY300};\r\n  `,\r\n\r\n  plain: css`\r\n    background-color: transparent;\r\n    color: ${({ theme }) => theme.color.GRAY900};\r\n  `,\r\n};\r\n\r\nexport const ButtonWrapper = styled.button.withConfig({\r\n  shouldForwardProp: (prop) => !['css', 'variant', 'size'].includes(prop),\r\n})<ButtonProps>`\r\n  font-size: 16px;\r\n  line-height: 16px;\r\n  text-align: center;\r\n\r\n  ${({ size = 'md' }) => {\r\n    return css`\r\n      padding: ${paddingSize[size]};\r\n    `;\r\n  }};\r\n\r\n  ${({ variant = 'primary' }) => {\r\n    return variants[variant];\r\n  }};\r\n\r\n  ${({ variant = 'primary' }) => {\r\n    if (variant !== 'plain') {\r\n      return css`\r\n        &:disabled {\r\n          opacity: 0.6;\r\n        }\r\n\r\n        &:not([disabled]):hover {\r\n          opacity: 0.8;\r\n        }\r\n\r\n        border-radius: 4px;\r\n\r\n        transition: 0.2s;\r\n      `;\r\n    }\r\n  }};\r\n\r\n  ${(props) => props.css}\r\n`;\r\n","import { styled } from 'styled-components';\nimport type { TextSize } from '~/types/size';\nimport type { TextProps, Weight } from './Text';\n\nconst fontWeight: Record<Weight, number> = {\n  light: 100,\n  normal: 400,\n  semiBold: 600,\n  bold: 800,\n};\n\nconst fontSize: Record<TextSize, string> = {\n  xxs: '10px',\n  xs: '12px',\n  sm: '14px',\n  md: '16px',\n  lg: '18px',\n  xl: '20px',\n  xxl: '22px',\n};\n\nexport const TextWrapper = styled.p.withConfig({\n  shouldForwardProp: (prop) => !['size', 'weight', 'css'].includes(prop),\n})<TextProps>`\n  h1&,\n  h2&,\n  h3&,\n  h4&,\n  h5&,\n  h6& {\n    font-weight: bold;\n  }\n  h1& {\n    font-size: 36px;\n  }\n  h2& {\n    font-size: 32px;\n  }\n  h3& {\n    font-size: 28px;\n  }\n  h4& {\n    font-size: 24px;\n  }\n  p&,\n  span&,\n  strong&,\n  small& {\n    font-size: ${({ size = 'md' }) => fontSize[size] || 'initial'};\n    font-weight: ${({ weight = 'normal' }) => fontWeight[weight] || 'initial'};\n  }\n  && {\n    ${(props) => props.css}\n  }\n`;\n","import { css, styled } from 'styled-components';\nimport type { TeamBadgeProps } from '~/components/team/TeamBadge/TeamBadge';\n\nexport const Wrapper = styled.div.withConfig({\n  shouldForwardProp: (prop) => !['teamPlaceColor', 'size'].includes(prop),\n})<TeamBadgeProps>`\n  ${({ size }) => {\n    if (size === 'sm')\n      return css`\n        width: 6px;\n        height: 6px;\n      `;\n    if (size === 'lg')\n      return css`\n        width: 24px;\n        height: 24px;\n      `;\n    return css`\n      width: 20px;\n      height: 20px;\n    `;\n  }}\n\n  border-radius: 50%;\n  background-color: ${({ theme, teamPlaceColor }) =>\n    theme.teamColor[teamPlaceColor]};\n`;\n","import { styled, css, type CSSProp } from 'styled-components';\nimport type { CalendarSize } from '~/types/size';\n\nexport const Container = styled.div<{ $css: CSSProp; $isMobile: boolean }>`\n  display: flex;\n  position: absolute;\n  flex-direction: column;\n  z-index: ${({ theme }) => theme.zIndex.MODAL};\n  gap: 16px;\n\n  ${({ $isMobile }) => {\n    if ($isMobile)\n      return css`\n        width: 300px;\n        padding: 10px 10px 20px 26px;\n      `;\n\n    return css`\n      width: 446px;\n      padding: 18px 22px;\n    `;\n  }}\n\n  border-radius: 10px;\n  background-color: ${({ theme }) => theme.color.WHITE};\n\n  box-shadow:\n    0 0 1px #1b1d1f33,\n    0 15px 25px #1b1d1f33,\n    0 5px 10px #1b1d1f1f;\n\n  ${({ $css }) => $css};\n`;\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const TeamWrapper = styled.div`\n  display: flex;\n  gap: 12px;\n`;\n\nexport const MenuContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n\n  gap: 6px;\n`;\n\nexport const PeriodWrapper = styled.div<{ $isMobile: boolean }>`\n  display: flex;\n\n  gap: 2px;\n\n  ${({ $isMobile }) => {\n    if ($isMobile)\n      return css`\n        flex-direction: column;\n      `;\n\n    return css`\n      align-items: center;\n    `;\n  }}\n`;\n\nexport const teamName = css`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n\n  max-width: 200px;\n`;\n\nexport const menuIcon = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  width: 28px;\n  height: 28px;\n  padding: 0;\n\n  border-radius: 8px;\n\n  svg {\n    width: 28px;\n    height: 28px;\n  }\n\n  &:hover {\n    background-color: ${({ theme }) => theme.color.GRAY100};\n  }\n`;\n\nexport const closeButton = ($isMobile: boolean) => css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  align-self: flex-end;\n\n  width: 80px;\n  height: 42px;\n  ${$isMobile &&\n  css`\n    margin-right: 10px;\n  `}\n\n  cursor: pointer;\n`;\n\nexport const modalLocation = (\n  row: number,\n  column: number,\n  level: number,\n  calendarWidth: number,\n  calendarLeft: number,\n  calendarSize: CalendarSize,\n  isMobile: boolean,\n) => {\n  if (isMobile)\n    return css`\n      top: 50%;\n      left: 50%;\n\n      transform: translate(-50%, -50%);\n    `;\n\n  if (calendarSize === 'md')\n    return css`\n      position: absolute;\n      top: ${(row < 3 ? 92 : -128) + (row + 1) * 110 + level * 18}px;\n      left: ${(column > 3\n        ? calendarWidth / 7 - 446\n        : column === 3\n        ? calendarWidth / 14 - 223\n        : 0) +\n      calendarLeft +\n      (calendarWidth * column) / 7}px;\n    `;\n\n  if (calendarSize == 'sm')\n    return css`\n      position: fixed;\n      top: 26%;\n      left: 12%;\n    `;\n};\n\nexport const scheduleTitleText = css`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n\n  width: 100%;\n`;\n","import Modal from '~/components/common/Modal/Modal';\nimport Text from '~/components/common/Text/Text';\nimport { useModal } from '~/hooks/useModal';\nimport * as S from './ScheduleModal.styled';\nimport { CloseIcon, DeleteIcon, EditIcon } from '~/assets/svg';\nimport Button from '~/components/common/Button/Button';\nimport type { SchedulePosition } from '~/types/schedule';\nimport { useFetchScheduleById } from '~/hooks/queries/useFetchScheduleById';\nimport { useDeleteSchedule } from '~/hooks/queries/useDeleteSchedule';\nimport TeamBadge from '~/components/team/TeamBadge/TeamBadge';\nimport { useToast } from '~/hooks/useToast';\nimport { useTeamPlace } from '~/hooks/useTeamPlace';\nimport type { CalendarSize } from '~/types/size';\nimport { getIsMobile } from '~/utils/getIsMobile';\nimport { generateDateTimeRangeDescription } from '~/utils/generateDateTimeRangeDescription';\n\ninterface ScheduleModalProps {\n  calendarWidth: number;\n  calendarLeft: number;\n  calendarSize?: CalendarSize;\n  scheduleId: number;\n  position: SchedulePosition;\n  onOpenScheduleEditModal: () => void;\n}\n\nconst ScheduleModal = (props: ScheduleModalProps) => {\n  const {\n    calendarWidth,\n    calendarLeft,\n    scheduleId,\n    position,\n    onOpenScheduleEditModal,\n    calendarSize = 'md',\n  } = props;\n  const { closeModal } = useModal();\n  const { showToast } = useToast();\n  const { teamPlaceColor, teamPlaceId, displayName } = useTeamPlace();\n  const isMobile = getIsMobile();\n\n  const { scheduleById } = useFetchScheduleById(teamPlaceId, scheduleId);\n  const { mutateDeleteSchedule } = useDeleteSchedule(teamPlaceId, scheduleId);\n\n  if (scheduleById === undefined) return;\n  const { title, startDateTime, endDateTime } = scheduleById;\n  const { row, column, level } = position;\n\n  const handleScheduleDelete = () => {\n    if (confirm('일정을 삭제하시겠어요?')) {\n      mutateDeleteSchedule(undefined, {\n        onSuccess: () => {\n          showToast('success', '일정이 삭제되었습니다.');\n          closeModal();\n        },\n      });\n    }\n  };\n\n  return (\n    <Modal>\n      <S.Backdrop onClick={closeModal} />\n      <S.Container\n        $isMobile={isMobile}\n        $css={S.modalLocation(\n          row,\n          column,\n          level,\n          calendarWidth,\n          calendarLeft,\n          calendarSize,\n          isMobile,\n        )}\n      >\n        <S.Header>\n          <S.TeamWrapper>\n            <TeamBadge teamPlaceColor={teamPlaceColor} size=\"lg\" />\n            {!isMobile && (\n              <div title={displayName}>\n                <Text css={S.teamName}>{displayName}</Text>\n              </div>\n            )}\n          </S.TeamWrapper>\n          <S.MenuContainer>\n            <Button\n              type=\"button\"\n              variant=\"plain\"\n              onClick={onOpenScheduleEditModal}\n              css={S.menuIcon}\n            >\n              <EditIcon />\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"plain\"\n              onClick={handleScheduleDelete}\n              css={S.menuIcon}\n            >\n              <DeleteIcon />\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"plain\"\n              onClick={closeModal}\n              css={S.menuIcon}\n            >\n              <CloseIcon />\n            </Button>\n          </S.MenuContainer>\n        </S.Header>\n        <Text size=\"xxl\" weight=\"bold\" css={S.scheduleTitleText}>\n          {title}\n        </Text>\n        <S.PeriodWrapper $isMobile={isMobile}>\n          <time>\n            <Text>\n              {generateDateTimeRangeDescription(startDateTime, endDateTime)}\n            </Text>\n          </time>\n        </S.PeriodWrapper>\n        <Button\n          type=\"button\"\n          variant=\"primary\"\n          css={S.closeButton(isMobile)}\n          onClick={closeModal}\n        >\n          확인\n        </Button>\n      </S.Container>\n    </Modal>\n  );\n};\n\nexport default ScheduleModal;\n"],"names":[],"sourceRoot":""}